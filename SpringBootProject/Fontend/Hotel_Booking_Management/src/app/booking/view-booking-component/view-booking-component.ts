import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { Hotel } from '../../model/hotel.model';
import { Booking } from '../../model/booking.model';
import { BookingService } from '../../service/booking-service';
import { HttpClient } from '@angular/common/http';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

@Component({
  selector: 'app-view-booking-component',
  standalone: false,
  templateUrl: './view-booking-component.html',
  styleUrl: './view-booking-component.css'
})
export class ViewBookingComponent implements OnInit {

  hotels: any[] = [];
  selectedHotelId: number | null = null;
  bookings: any[] = [];


  @ViewChild('pdfContent', { static: false }) pdfContent!: ElementRef;

  constructor(
    private http: HttpClient,
    private cdr: ChangeDetectorRef


  ) { }


  ngOnInit(): void {
    this.loadHotels();
  }


  loadHotels() {
    this.http.get<any[]>('http://localhost:8082/api/hotel/all')
      .subscribe({
        next: (res) => {
          this.hotels = res;
          this.cdr.markForCheck();
        },
        error: (err) => console.error('Error loading hotels', err)
      });
  }


  onHotelChange() {
    if (this.selectedHotelId) {
      this.http.get<any[]>(`http://localhost:8082/api/booking/hotel/${this.selectedHotelId}`)
        .subscribe({
          next: (data) => {
            this.bookings = data;
            this.cdr.markForCheck();
          },
          error: (err) => console.error('Error loading bookings', err)
        });
    } else {
      this.bookings = [];
    }
  }


  generateBookingPDF(): void {
    if (!this.selectedHotelId) return;

    const element = this.pdfContent.nativeElement;
    const selectedHotel = this.hotels.find(h => h.id === Number(this.selectedHotelId));

    const currentDate = new Date();
    const formattedDate = currentDate.toLocaleDateString();
    const formattedTime = currentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });

    element.style.display = 'block';
    element.style.position = 'absolute';
    element.style.left = '-9999px';
    element.style.opacity = '1';

    // === PDF Setup ===
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pdfWidth = pdf.internal.pageSize.getWidth();

    const headerHeight = 50; // header height in mm

    // === Draw Header SEPARATELY ===
    pdf.setFillColor(30, 144, 255);
    pdf.rect(0, 0, pdfWidth, headerHeight, 'F'); // header background
    pdf.setTextColor(255, 255, 255);

    // Logo
    const autoLogo = 'https://tinyurl.com/55m4a32c';
    pdf.addImage(autoLogo, 'PNG', 10, 10, 30, 30);

    // Hotel Name & Address
    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(18);
    pdf.text(selectedHotel?.name || 'Hotel', pdfWidth / 2, 18, { align: 'center' });

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(12);
    if (selectedHotel?.address) {
      pdf.text(selectedHotel.address, pdfWidth / 2, 30, { align: 'center' });
    }

    // Date & Time (top-right)
    pdf.setFontSize(10);
    pdf.text(`Date: ${formattedDate}`, pdfWidth - 10, 15, { align: 'right' });
    pdf.text(`Time: ${formattedTime}`, pdfWidth - 10, 23, { align: 'right' });

    // === Capture Table Only ===
    html2canvas(element, { scale: 2, useCORS: true }).then((canvas) => {
      const imgData = canvas.toDataURL('image/png');
      const tableY = headerHeight + 5; // table starts below header
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      pdf.addImage(imgData, 'PNG', 0, tableY, pdfWidth, pdfHeight);

      // === Watermark Over Table Only ===
      // const watermarkX = pdfWidth / 2;
      // const watermarkY = tableY + pdfHeight / 2; // center of table
      // pdf.setTextColor(200, 200, 200);
      // pdf.setFontSize(60);
      // pdf.setFont('helvetica', 'bold');
      // pdf.text('HOTEL BOOKING', watermarkX, watermarkY, { align: 'center', angle: 45 });

      // === Footer ===
      const pageHeight = pdf.internal.pageSize.getHeight();
      pdf.setFillColor(30, 144, 255);
      pdf.rect(0, pageHeight - 20, pdfWidth, 20, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(12);
      pdf.text('Generated by Hotel Booking Management System', pdfWidth / 2, pageHeight - 7, { align: 'center' });

      pdf.save(`${selectedHotel?.name || 'booking'}-report.pdf`);
    }).finally(() => {
      element.style.display = 'none';
      element.style.position = 'static';
      element.style.opacity = '0';
    }).catch(err => console.error(err));
  }





}
