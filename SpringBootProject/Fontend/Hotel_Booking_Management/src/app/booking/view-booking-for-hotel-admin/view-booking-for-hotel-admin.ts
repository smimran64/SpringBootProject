import { ChangeDetectorRef, Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { Hotel } from '../../model/hotel.model';
import { HotelService } from '../../service/hotel.service';
import { HttpClient } from '@angular/common/http';

import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';




@Component({
  selector: 'app-view-booking-for-hotel-admin',
  standalone: false,
  templateUrl: './view-booking-for-hotel-admin.html',
  styleUrl: './view-booking-for-hotel-admin.css'
})
export class ViewBookingForHotelAdmin implements OnInit {

  hotels: Hotel[] = [];
  selectedHotelId: number | null = null;
  bookings: any[] = [];
  filteredBookings: any[] = [];

  startDate: string = '';
  endDate: string = '';

  loading = false;
  errorMessage: string | null = null;

  @ViewChild('pdfContent', { static: false }) pdfContent!: ElementRef;

  constructor(
    private hotelService: HotelService,
    private cdr: ChangeDetectorRef,
    private http: HttpClient
  ) {}

  ngOnInit(): void {
    this.loadHotels();
  }

  private loadHotels(): void {
    this.loading = true;

    this.hotelService.getMyHotels().subscribe({
      next: (data: Hotel[]) => {
        this.hotels = data;
        this.loading = false;
        this.cdr.markForCheck();
      },
      error: (err) => {
        console.error('Hotel loading error', err);
        this.errorMessage = 'Failed to load hotels';
        this.loading = false;
      }
    });
  }

  onHotelChange() {
    if (this.selectedHotelId) {
      this.http.get<any[]>(`http://localhost:8082/api/booking/hotel/${this.selectedHotelId}`)
        .subscribe({
          next: (data) => {
            this.bookings = data;
            this.filteredBookings = data; // Initially all bookings visible
            this.cdr.markForCheck();
          },
          error: (err) => console.error('Error loading bookings', err)
        });
    } else {
      this.bookings = [];
      this.filteredBookings = [];
    }
  }

  filterBookingsByDate(): void {
  if (!this.startDate || !this.endDate) {
    alert('⚠️ Please select both start and end dates!');
    return;
  }

  const start = new Date(this.startDate);
  const end = new Date(this.endDate);

  // 🧠 Logic:
  // Include booking if any part of its stay (checkIn→checkOut) overlaps with the selected range.
  this.filteredBookings = this.bookings.filter((booking) => {
    const checkIn = new Date(booking.checkIn);
    const checkOut = new Date(booking.checkOut);

    // overlap condition
    return checkOut >= start && checkIn <= end;
  });
}


resetFilter(): void {
    this.startDate = '';
    this.endDate = '';
    this.filteredBookings = [...this.bookings];
  }

  generateBookingPDF(): void {
    if (!this.selectedHotelId) return;

    const element = this.pdfContent.nativeElement;
    const selectedHotel = this.hotels.find(h => h.id === Number(this.selectedHotelId));

    const currentDate = new Date();
    const formattedDate = currentDate.toLocaleDateString();
    const formattedTime = currentDate.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true });

    // Force show off-screen
    element.style.display = 'block';
    element.style.position = 'absolute';
    element.style.left = '-9999px';
    element.style.opacity = '1';

    html2canvas(element, { scale: 2, useCORS: true }).then((canvas) => {
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

      // === 🎨 Header ===
      pdf.setFillColor(44, 62, 80);
      pdf.rect(0, 0, pdfWidth, 45, 'F');
      pdf.setTextColor(255, 255, 255);

      const autoLogo = 'https://tinyurl.com/55m4a32c';
      pdf.addImage(autoLogo, 'PNG', 10, 10, 30, 30);

      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text(selectedHotel?.name || 'Hotel', pdfWidth / 2, 18, { align: 'center' });

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      if (selectedHotel?.address) {
        pdf.text(selectedHotel.address, pdfWidth / 2, 28, { align: 'center' });
      }

      pdf.setFontSize(10);
      pdf.text(`Date: ${formattedDate}`, pdfWidth - 10, 15, { align: 'right' });
      pdf.text(`Time: ${formattedTime}`, pdfWidth - 10, 23, { align: 'right' });

      // === Table Content ===
      pdf.addImage(imgData, 'PNG', 0, 50, pdfWidth, pdfHeight);

      // === Footer ===
      const pageHeight = pdf.internal.pageSize.getHeight();
      pdf.setFillColor(44, 62, 80);
      pdf.rect(0, pageHeight - 15, pdfWidth, 15, 'F');
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(12);
      pdf.text(
        'Generated by Hotel Booking Management System',
        pdfWidth / 2,
        pageHeight - 7,
        { align: 'center' }
      );

      pdf.save(`${selectedHotel?.name || 'booking'}-report.pdf`);
    }).catch(error => {
      console.error('Error generating canvas:', error);
    }).finally(() => {
      element.style.display = 'none';
      element.style.position = 'static';
      element.style.opacity = '0';
    });
  }






}
